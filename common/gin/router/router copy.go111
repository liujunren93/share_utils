package router

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
)

const WHITE_PREFIX = "White"

type RouterGroup struct {
	group *gin.RouterGroup
}

func NewRouterGroup(irouter *gin.RouterGroup) RouterGroup {
	return RouterGroup{
		group: irouter,
	}

}

func InWhitelist(ctx *gin.Context, table string) bool {
	return ctx.GetBool(WHITE_PREFIX + table)
}

//White set WhiteList
// prefix:White
func (g RouterGroup) White(table string) RouterGroup {
	var group = *g.group
	group.Use(func(ctx *gin.Context) {
		fmt.Println(11333)
		ctx.Set(WHITE_PREFIX+table, true)
	})

	return NewRouterGroup(&group)

}

func (g RouterGroup) Use(ms ...gin.HandlerFunc) RouterGroup {
	g.group.Use(ms...)
	return g

}

func (g RouterGroup) Handle(httpMethod, relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.Handle(httpMethod, relativePath, handlers...)
	return g
}

func (g RouterGroup) Any(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.Any(relativePath, handlers...)
	return g
}

func (g RouterGroup) GET(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.GET(relativePath, handlers...)
	return g
}

func (g RouterGroup) POST(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.POST(relativePath, handlers...)
	return g
}

func (g RouterGroup) DELETE(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.DELETE(relativePath, handlers...)
	return g
}

func (g RouterGroup) PATCH(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.PATCH(relativePath, handlers...)
	return g
}

func (g RouterGroup) PUT(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.PUT(relativePath, handlers...)
	return g
}

func (g RouterGroup) OPTIONS(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.OPTIONS(relativePath, handlers...)
	return g
}

func (g RouterGroup) HEAD(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group.Any(relativePath, handlers...)
	return g
}

func (g RouterGroup) StaticFile(relativePath, filepath string) RouterGroup {
	g.group.StaticFile(relativePath, filepath)
	return g
}

func (g RouterGroup) StaticFileFS(relativePath, filepath string, fs http.FileSystem) RouterGroup {
	g.group.StaticFileFS(relativePath, filepath, fs)
	return g
}

func (g RouterGroup) Static(relativePath, root string) RouterGroup {
	g.group.Static(relativePath, root)
	return g
}

func (g RouterGroup) StaticFS(relativePath string, fs http.FileSystem) RouterGroup {
	g.group.StaticFS(relativePath, fs)
	return g
}

func (g RouterGroup) Group(relativePath string, handlers ...gin.HandlerFunc) RouterGroup {
	g.group = g.group.Group(relativePath, handlers...)
	return g
}
